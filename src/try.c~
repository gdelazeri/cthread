#include <stdio.h>
#include <stdlib.h>
#include <ucontext.h>
#include "../include/cdata.h"
#include "../include/support.h"
#include "../include/cthread.h"
#define TAM_MEM 4096

TCB_t* searchNearest(int ticket);
TCB_t* searchTID(PFILA2 pFila, int tid);
void SILVESTER_ESCALONE();
void readFila(PFILA2 fila);

int lockReturn = 0;
int tid=0;
FILA2 ap;
PFILA2 APTO=&ap;
FILA2 bl;
PFILA2 BLOCK=&bl;
FILA2 w_j;
PFILA2 W_JOIN=&w_j;
TCB_t* EXEC;
ucontext_t returncontext;

//###########################################################################################################################//


int readFila(PFILA2 fila)
{/*Printa o tid e o estado de todos os tcbs*/
	TCB_t* t;

	if(FirstFila2(fila))
		return 0;

	printf("PRINT FILA::::\n");
	while((t=GetAtIteratorFila2(fila)) != NULL)
	{
		printf("t->tid: %d\n",  t->tid);
		printf("t->state: %d\n", t->state);  
        	printf("t->ticket: %d\n", t->ticket);
		if (NextFila2(fila))
    		return 1;
    }
}
    
void clearBlocked(int tidJ)
{
    wJoin* join;
    TCB_t* tcb_aux;

    if (FirstFila2(W_JOIN))
        return;

    while((join=GetAtIteratorFila2(W_JOIN)) != NULL){
        if(join->tidJoin == tidJ){
            tcb_aux = searchTID(BLOCK,join->tidBlocked);
            tcb_aux->state = 1;		
	    AppendFila2(APTO, tcb_aux);
	    deleteNode(BLOCK, tcb_aux);
            //moveNode(BLOCK, APTO, tcb_aux);
            DeleteAtIteratorFila2(W_JOIN);
            return;
        }
        else
            if (NextFila2(W_JOIN))
                return;
    }
}


int searchJoin(int tid)
{   //Retorna 1 se tid está bloquando alguem, 0 se não
    wJoin* join;
    
     if (FirstFila2(W_JOIN))
        return 0;
        
    while((join=GetAtIteratorFila2(W_JOIN)) != NULL){
        if(join->tidJoin == tid)
            return 1;
        else
            if (NextFila2(W_JOIN))
                return 0;
    }
}





int ccreate (void* (*start)(void*), void *arg){

    //MODIFICAR PARA O RETORNO DA FUNÇAO (uc_link)
    if(tid == 0){


        CreateFila2(APTO);
        CreateFila2(BLOCK);
        CreateFila2(W_JOIN);
        TCB_t* main_tcb = (TCB_t*) malloc (sizeof(TCB_t));

        //inicializar TCB
        main_tcb->ticket = Random2();
        main_tcb->state = 2;
        main_tcb->tid = tid;
	(main_tcb->context).uc_link = NULL;
	(main_tcb->context).uc_stack.ss_sp = malloc (TAM_MEM * sizeof(char));
	(main_tcb->context).uc_stack.ss_size = TAM_MEM;
	makecontext(&(main_tcb->context),(void*) main,0);
        EXEC = main_tcb;

        getcontext(&returncontext);
        if (lockReturn == 1){
            clearBlocked(EXEC->tid);
	    //readFila(BLOCK);
            EXEC->state = 4;
			
            SILVESTER_ESCALONE();
		return 0;
        }
        lockReturn = 1;

    }
	tid+=1;
	//malloc em TCB
    TCB_t* novo_tcb = (TCB_t*) malloc (sizeof(TCB_t));

	//inicializar TCB
	novo_tcb->ticket = Random2();
	novo_tcb->state = 1;
	novo_tcb->tid = tid;
	if (getcontext(&novo_tcb->context) == -1)
	    return 0;
	(novo_tcb->context).uc_link = &returncontext;
	(novo_tcb->context).uc_stack.ss_sp = malloc (TAM_MEM * sizeof(char));
	(novo_tcb->context).uc_stack.ss_size = TAM_MEM;
	makecontext(&(novo_tcb->context), (void(*)())start,1,arg);

	//inserir na fila de APTOS
	if (!(AppendFila2(APTO, novo_tcb) == 0))
	    return 0;

	return tid;
};

int deleteNode(PFILA2 fila, TCB_t *tcb)
{	/*Retorna 0 se deleta corretamente*/
	TCB_t* tcb_aux;

	if(FirstFila2(fila))
		return 1;
	
	while(tcb_aux=GetAtIteratorFila2(fila))
	{
		if(tcb_aux->tid == tcb->tid){
			DeleteAtIteratorFila2(fila);
			return 0;
		}
		else
			NextFila2(fila);
	}
	return 1;
}



int cjoin(int tid){
	//se existe
	if((searchTID(APTO, tid) == NULL) && (searchTID(BLOCK, tid) == NULL))
		return -1;
	//se a thread ja esta sendo esperada por alguem
	if(searchJoin(tid))
		return -1;
	
    wJoin* JoinS = (wJoin*) malloc (sizeof(wJoin));
	JoinS->tidBlocked = EXEC->tid;
	JoinS->tidJoin = tid;
	AppendFila2(W_JOIN,JoinS);
	
	
	EXEC->state = 3;
	

	SILVESTER_ESCALONE();
	return 0;
};


void SILVESTER_ESCALONE()
{	
  
    int sorteio = Random2();
	//printf("SORTEIO:%d",sorteio);
	//FIFO
    //FirstFila2(APTO);
    //printf("\n\n %d \n\n",x);
    //TCB_t* toEXEC=GetAtIteratorFila2(APTO);
	//RANDOM
    //printf("Eu sou a main após a criação das threads\n");
    TCB_t* toEXEC = searchNearest(sorteio);
    //printf("Eu sou a main após a criação das threads\n");
    //printf("toEXEC = %d", toEXEC->tid);
    dispatcher(toEXEC);

    return;
}


int dispatcher(TCB_t* toEXEC){
	
	int x;
	x = EXEC->state;
    switch(x){
        case 1:
            break;
        case 3:

            AppendFila2(BLOCK, EXEC);
            break;
        case 4:
            free(EXEC);     //Desaloca o TCB
            EXEC=NULL;
 	    toEXEC->state = 2;

	    EXEC = toEXEC;
	    deleteNode(APTO, toEXEC);
            //moveNode(APTO,NULL,toEXEC);
	    	//printf("\nEXEC->tid :%d EXEC->state :%d EXEC->ticket :%d\n",EXEC->tid,EXEC->state,EXEC->ticket);
            setcontext(&(EXEC->context));
            break;
        default:
            return -1;
    }
	toEXEC->state = 2;
	TCB_t* auxEXEC = EXEC;
    //moveNode(APTO,NULL,toEXEC);
            EXEC = toEXEC;
	    deleteNode(APTO, toEXEC);
		//printf("\nEXEC->tid :%d EXEC->state :%d EXEC->ticket :%d\n",EXEC->tid,EXEC->state,EXEC->ticket);
    swapcontext(&(auxEXEC->context),&(EXEC->context));
    return 0;
}


TCB_t* searchNearest(int ticket)
{
    TCB_t* tcb;
    TCB_t* tcb_aux;
    int aux_dif = -1;
    FirstFila2(APTO);
 
    while((tcb=GetAtIteratorFila2(APTO)) != NULL)
        if((abs(tcb->ticket - ticket) < aux_dif) || aux_dif < 0)
        {	

            tcb_aux = tcb;
            aux_dif = abs(tcb->ticket - ticket);
	    
        }
        else
            if (NextFila2(APTO)){
	           return tcb_aux;}
return tcb_aux;
}


int cyield(void){
	EXEC->state = 1;
	AppendFila2(APTO, EXEC);
	SILVESTER_ESCALONE();
	return 0;
}




TCB_t* searchTID(PFILA2 pFila, int tid)
{   //Retorna um ponteiro do tcb que contém "tid"
    TCB_t* tcb;

    if (FirstFila2(pFila))
        return NULL;

    while((tcb=GetAtIteratorFila2(pFila)) != NULL){
        if(tcb->tid == tid)
            return tcb;
        else
            if (NextFila2(pFila))
                return NULL;
    }
	return NULL;
}



int cwait (csem_t *sem){
	//printf("WAIT\n");
	//printf("endereço: %p",&sem->fila);
    sem->count -= 1;
	//printf("\n\n readfila 1 = certo: %d \n\n",readFila(sem->fila));
	//printf("->->count: %d \n \n",sem->count);
    if(sem->count < 0){
        EXEC->state = 3;
        AppendFila2(sem->fila,EXEC);
	//readFila(sem->fila);	
	//printf("WAIT\n");
        SILVESTER_ESCALONE();
    }
    return 0;
}



 
 int csignal (csem_t *sem){  
	//printf("endereço: %p",sem->fila); 
	//printf("\n\n readfila 1 = certo: %d \n\n",readFila(sem->fila));
	sem->count += 1;	
	//printf("SIGNAL\n"); 
	//fflush(stdout);
	//printf(" \n\n%d",readFila(sem->fila)); 
	//printf("->->count: %d \n \n",sem->count);
	//readFila(sem->fila);

	

    if(sem->count <= 0){
	//printf("\n \n entrou: %d \n \n",sem->count);
	//printf("SIGNAL\n"); 
	//readFila(sem->fila);
        FirstFila2(sem->fila);
        TCB_t* aux=GetAtIteratorFila2(sem->fila);
	//printf("SIGNAL appende ________\n"); 
        aux->state = 1;
	AppendFila2(APTO, aux);
	//printf("SIGNAL\n"); 
	deleteNode(BLOCK, aux);
	//printf("SIGNAL dps do read\n"); 
        //moveNode(BLOCK, APTO, aux);
        DeleteAtIteratorFila2(sem->fila);
	//readFila(sem->fila);
	//readFila(APTO);
	printf("SIGNAL\n");
    }
	printf("opk");
    return 0;
}

 int csem_init (csem_t *sem, int count){
    //sem = (csem_t *) malloc (sizeof(csem_t));
	//sem=auxSem;
    //FILA2 sF;
    PFILA2 semFila = (PFILA2)malloc(sizeof(FILA2));
    //semFila = &sF;
    CreateFila2(semFila);
	//printf("endereço: %p",semFila);
    sem->fila = semFila;
    sem->count = count;

    
    return 0;
 };
